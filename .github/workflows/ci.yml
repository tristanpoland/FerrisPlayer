# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: debug

jobs:
  # Rust Backend Build and Test
  backend:
    name: Backend (Rust)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust-version: [stable, beta]
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust ${{ matrix.rust-version }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
    
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Setup test database
      run: |
        touch test.db
        export DATABASE_URL="sqlite:test.db"
        export TMDB_API_KEY="test-key"
    
    - name: Run tests
      run: |
        export DATABASE_URL="sqlite:test.db"
        export TMDB_API_KEY="test-key"
        cargo test --verbose
    
    - name: Build backend
      run: cargo build --release
    
    - name: Run security audit
      run: |
        cargo install cargo-audit
        cargo audit
      continue-on-error: true
    
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-${{ matrix.rust-version }}
        path: |
          backend/target/release/mediarest
          backend/migrations/
        retention-days: 30

  # Frontend Build and Test
  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test -- --watchAll=false --coverage
        else
          echo "No tests configured, skipping"
        fi
      continue-on-error: true
    
    - name: Build frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: |
          frontend/.next/
          frontend/public/
        retention-days: 30

  # Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Frontend security audit
      run: npm audit --audit-level high
      working-directory: ./frontend
      continue-on-error: true
    
    - name: Backend security audit
      run: |
        cargo install cargo-audit
        cargo audit
      working-directory: ./backend
      continue-on-error: true
    
    - name: Check for vulnerable dependencies (frontend)
      run: |
        npx audit-ci --config .auditci.json
      working-directory: ./frontend
      continue-on-error: true
    
    - name: SAST scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config
    
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-stable
        path: backend/
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-20.x
        path: frontend/
    
    - name: Setup test database
      run: |
        cd backend
        touch test.db
        export DATABASE_URL="sqlite:test.db"
        export TMDB_API_KEY="test-key"
        # Run migrations if available
        if [ -f "migrations/schema.sql" ]; then
          sqlite3 test.db < migrations/schema.sql
        fi
    
    - name: Start backend server
      run: |
        cd backend
        export DATABASE_URL="sqlite:test.db"
        export TMDB_API_KEY="test-key"
        export ROCKET_PORT=8000
        chmod +x target/release/mediarest || cargo build --release
        ./target/release/mediarest &
        sleep 10
      continue-on-error: true
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run integration tests
      run: |
        # Basic API health check
        curl -f http://localhost:8000/health || echo "Backend not responding"
        
        # Add more integration tests here as needed
        echo "Integration tests completed"
      continue-on-error: true

  # Build Check Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend, frontend, security, integration]
    if: always()
    
    steps:
    - name: Check build results
      run: |
        echo "Backend build: ${{ needs.backend.result }}"
        echo "Frontend build: ${{ needs.frontend.result }}"
        echo "Security checks: ${{ needs.security.result }}"
        echo "Integration tests: ${{ needs.integration.result }}"
        
        if [ "${{ needs.backend.result }}" != "success" ] || [ "${{ needs.frontend.result }}" != "success" ]; then
          echo "Critical builds failed!"
          exit 1
        fi
        
        echo "All critical builds passed!"
