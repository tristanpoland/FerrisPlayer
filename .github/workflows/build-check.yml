# .github/workflows/build-check.yml
name: Build Check

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Quick build verification
  build-backend:
    name: Build Rust Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
    
    - name: Install SQLite
      run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev
    
    - name: Check format
      run: cd backend && cargo fmt --check
    
    - name: Run clippy
      run: cd backend && cargo clippy -- -D warnings
    
    - name: Build
      run: cd backend && cargo build --release
      env:
        DATABASE_URL: sqlite:./test.db
        TMDB_API_KEY: test

  build-frontend:
    name: Build Next.js Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: cd frontend && npm ci
    
    - name: Lint
      run: cd frontend && npm run lint
    
    - name: Type check
      run: cd frontend && npx tsc --noEmit
    
    - name: Build
      run: cd frontend && npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api

  # Verify Docker builds work
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test backend Docker build
      run: |
        cat > backend/Dockerfile << 'EOF'
        FROM rust:1.70 as builder
        WORKDIR /app
        COPY Cargo.toml Cargo.lock ./
        COPY src/ src/
        RUN apt-get update && apt-get install -y libsqlite3-dev pkg-config
        RUN cargo build --release
        
        FROM debian:bookworm-slim
        RUN apt-get update && apt-get install -y libsqlite3-0 ca-certificates && rm -rf /var/lib/apt/lists/*
        COPY --from=builder /app/target/release/mediarest /usr/local/bin/mediarest
        COPY migrations/ /app/migrations/
        EXPOSE 8000
        CMD ["mediarest"]
        EOF
        
        docker build -t ferrisplayer-backend ./backend
    
    - name: Test frontend Docker build
      run: |
        cat > frontend/Dockerfile << 'EOF'
        FROM node:20-alpine as builder
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci
        COPY . .
        RUN npm run build
        
        FROM node:20-alpine
        WORKDIR /app
        COPY --from=builder /app/.next ./.next
        COPY --from=builder /app/public ./public
        COPY --from=builder /app/package*.json ./
        RUN npm ci --production
        EXPOSE 3000
        CMD ["npm", "start"]
        EOF
        
        docker build -t ferrisplayer-frontend ./frontend
